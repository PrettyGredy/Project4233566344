//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputSystem/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""Mobile"",
            ""id"": ""5ad158ba-754e-4ac8-b787-f64ea758ec1f"",
            ""actions"": [
                {
                    ""name"": ""Navigation"",
                    ""type"": ""Value"",
                    ""id"": ""9f9a1625-a9bd-4ede-9035-c9cbebe08d59"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FastRun"",
                    ""type"": ""Button"",
                    ""id"": ""c489c357-4bd9-43e8-ad5e-c20a1a4d6e86"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""1b7dddf8-cc4d-452d-8df3-2eabfb6e634f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SPA1"",
                    ""type"": ""Button"",
                    ""id"": ""62755d7a-15b3-406c-8b22-fb950731887a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SPA2"",
                    ""type"": ""Button"",
                    ""id"": ""231c8fc0-94e8-4b68-8ac1-0c7894b0a951"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SPA3"",
                    ""type"": ""Button"",
                    ""id"": ""fec15561-09ec-4b4d-a008-85497c543d7e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""65ce35e4-7394-4195-9ad7-c3a158f21555"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ef69f9f6-adab-4ed4-8839-243928c7891b"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ce27b6f8-9ffc-4586-ad69-26addcb1e396"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""51df7be7-4d10-431a-85e0-760a7ff12590"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d0b8de03-4f74-4639-aaf2-96ffae31af75"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5b351271-6883-4990-8737-3553ef8c5aeb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8467b96c-d0e2-4ce7-b772-ea6967afb56c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6c8657b2-107f-46cb-af93-360161a3707a"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FastRun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f6953bb-6da5-4791-a1ab-2224b27e9917"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aacaeb4b-fc5f-4713-a94b-404dcbe8b070"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SPA1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6cd3e969-928a-4172-8229-d3dbda48f13d"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SPA2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b70ab307-e2ae-4cbf-8c8a-c8f12280907d"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SPA3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e08117c8-250a-45fb-b63c-3127c21deb0e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Mobile
        m_Mobile = asset.FindActionMap("Mobile", throwIfNotFound: true);
        m_Mobile_Navigation = m_Mobile.FindAction("Navigation", throwIfNotFound: true);
        m_Mobile_FastRun = m_Mobile.FindAction("FastRun", throwIfNotFound: true);
        m_Mobile_Attack = m_Mobile.FindAction("Attack", throwIfNotFound: true);
        m_Mobile_SPA1 = m_Mobile.FindAction("SPA1", throwIfNotFound: true);
        m_Mobile_SPA2 = m_Mobile.FindAction("SPA2", throwIfNotFound: true);
        m_Mobile_SPA3 = m_Mobile.FindAction("SPA3", throwIfNotFound: true);
        m_Mobile_Roll = m_Mobile.FindAction("Roll", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Mobile
    private readonly InputActionMap m_Mobile;
    private List<IMobileActions> m_MobileActionsCallbackInterfaces = new List<IMobileActions>();
    private readonly InputAction m_Mobile_Navigation;
    private readonly InputAction m_Mobile_FastRun;
    private readonly InputAction m_Mobile_Attack;
    private readonly InputAction m_Mobile_SPA1;
    private readonly InputAction m_Mobile_SPA2;
    private readonly InputAction m_Mobile_SPA3;
    private readonly InputAction m_Mobile_Roll;
    public struct MobileActions
    {
        private @InputSystem m_Wrapper;
        public MobileActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Navigation => m_Wrapper.m_Mobile_Navigation;
        public InputAction @FastRun => m_Wrapper.m_Mobile_FastRun;
        public InputAction @Attack => m_Wrapper.m_Mobile_Attack;
        public InputAction @SPA1 => m_Wrapper.m_Mobile_SPA1;
        public InputAction @SPA2 => m_Wrapper.m_Mobile_SPA2;
        public InputAction @SPA3 => m_Wrapper.m_Mobile_SPA3;
        public InputAction @Roll => m_Wrapper.m_Mobile_Roll;
        public InputActionMap Get() { return m_Wrapper.m_Mobile; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MobileActions set) { return set.Get(); }
        public void AddCallbacks(IMobileActions instance)
        {
            if (instance == null || m_Wrapper.m_MobileActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MobileActionsCallbackInterfaces.Add(instance);
            @Navigation.started += instance.OnNavigation;
            @Navigation.performed += instance.OnNavigation;
            @Navigation.canceled += instance.OnNavigation;
            @FastRun.started += instance.OnFastRun;
            @FastRun.performed += instance.OnFastRun;
            @FastRun.canceled += instance.OnFastRun;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @SPA1.started += instance.OnSPA1;
            @SPA1.performed += instance.OnSPA1;
            @SPA1.canceled += instance.OnSPA1;
            @SPA2.started += instance.OnSPA2;
            @SPA2.performed += instance.OnSPA2;
            @SPA2.canceled += instance.OnSPA2;
            @SPA3.started += instance.OnSPA3;
            @SPA3.performed += instance.OnSPA3;
            @SPA3.canceled += instance.OnSPA3;
            @Roll.started += instance.OnRoll;
            @Roll.performed += instance.OnRoll;
            @Roll.canceled += instance.OnRoll;
        }

        private void UnregisterCallbacks(IMobileActions instance)
        {
            @Navigation.started -= instance.OnNavigation;
            @Navigation.performed -= instance.OnNavigation;
            @Navigation.canceled -= instance.OnNavigation;
            @FastRun.started -= instance.OnFastRun;
            @FastRun.performed -= instance.OnFastRun;
            @FastRun.canceled -= instance.OnFastRun;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @SPA1.started -= instance.OnSPA1;
            @SPA1.performed -= instance.OnSPA1;
            @SPA1.canceled -= instance.OnSPA1;
            @SPA2.started -= instance.OnSPA2;
            @SPA2.performed -= instance.OnSPA2;
            @SPA2.canceled -= instance.OnSPA2;
            @SPA3.started -= instance.OnSPA3;
            @SPA3.performed -= instance.OnSPA3;
            @SPA3.canceled -= instance.OnSPA3;
            @Roll.started -= instance.OnRoll;
            @Roll.performed -= instance.OnRoll;
            @Roll.canceled -= instance.OnRoll;
        }

        public void RemoveCallbacks(IMobileActions instance)
        {
            if (m_Wrapper.m_MobileActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMobileActions instance)
        {
            foreach (var item in m_Wrapper.m_MobileActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MobileActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MobileActions @Mobile => new MobileActions(this);
    public interface IMobileActions
    {
        void OnNavigation(InputAction.CallbackContext context);
        void OnFastRun(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnSPA1(InputAction.CallbackContext context);
        void OnSPA2(InputAction.CallbackContext context);
        void OnSPA3(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
    }
}
